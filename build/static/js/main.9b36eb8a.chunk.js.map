{"version":3,"sources":["BooksAPI.js","ShelfSelector.js","Books.js","search.js","Bookcase.js","list-books.js","bookshelf.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","ShelfSelector","props","onMove","searchBookShelf","_useState","useState","_useState2","slicedToArray","value","setValue","useEffect","react_default","a","createElement","className","onChange","event","target","disabled","Books","books","title","authors","thumbnail","bookid","setSearchBookShelf","getBookShelf","_ref","asyncToGenerator","regenerator_default","mark","_callee","abortCont","wrap","_context","prev","next","AbortController","bookId","then","res","json","data","catch","err","name","console","log","abrupt","abort","stop","_x","apply","this","arguments","didCancel","style","width","height","backgroundImage","src_ShelfSelector","undefined","map","author","authorName","split","join","key","Search","queriedBooks","setQueriedBooks","_useState3","_useState4","enteredQuery","setEnteredQuery","handleChange","query","identifier","setTimeout","_callee2","response","responseData","_context2","sent","clearTimeout","moveBook","currbook","_updateData","_callee3","_context3","updateData","react_router_dom","to","exact","type","placeholder","items","length","src_Books","imageLinks","smallThumbnail","Bookcase","filter","ListBooks","src_Bookcase","BookShelf","allBooks","setAllBooks","booksRef","useRef","getData","newData","current","prevCount","list_books","BooksApp","state","showSearchPage","react_router","render","location","path","component","React","Component","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.9b36eb8a.chunk.js","sourcesContent":["export const api = \"https://reactnd-books-api.udacity.com\";\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token;\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\n\nexport const headers = {\n    Accept: \"application/json\",\n    Authorization: token,\n};\n\nexport const get = (bookId) => fetch(`${api}/books/${bookId}`, { headers });\n\nexport const getAll = () => fetch(`${api}/books`, { headers });\n\nexport const update = (book, shelf) =>\n    fetch(`${api}/books/${book.id}`, {\n        method: \"PUT\",\n        headers: {\n            ...headers,\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ shelf }),\n    });\n\nexport const search = (query) =>\n    fetch(`${api}/search`, {\n        method: \"POST\",\n        headers: {\n            ...headers,\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ query }),\n    });\n","import React, { useEffect, useState } from \"react\";\nimport propTypes from \"prop-types\";\n\nconst ShelfSelector = (props) => {\n    const { onMove, shelf, searchBookShelf, book } = props;\n    const [value, setValue] = useState(searchBookShelf);\n\n    // When a new bookshelf is selected this will change the 'select' value with 'setValue' and update the books shelf with the onMove function\n    const handleChange = (event) => {\n        setValue(event.target.value);\n        onMove(book, event.target.value);\n    };\n    useEffect(() => {\n        setValue(searchBookShelf);\n    }, [searchBookShelf]);\n\n    return (\n        <div className=\"book-shelf-changer\">\n            <select value={shelf ? shelf : value} onChange={handleChange}>\n                <option value=\"move\" disabled>\n                    Move to...\n                </option>\n                <option value=\"currentlyReading\">Currently Reading</option>\n                <option value=\"wantToRead\">Want to Read</option>\n                <option value=\"read\">Read</option>\n                <option value=\"none\">None</option>\n            </select>\n        </div>\n    );\n};\n\nShelfSelector.propTypes = {\n    onMove: propTypes.func,\n    shelf: propTypes.string,\n    searchBookShelf: propTypes.string,\n    book: propTypes.object,\n};\n\nexport default ShelfSelector;\n","import React, { useState, useEffect } from \"react\";\nimport ShelfSelector from \"./ShelfSelector\";\nimport propTypes from \"prop-types\";\nimport { get } from \"./BooksAPI\";\n\n// Displays book item\nconst Books = (props) => {\n    const { books, onMove, title, authors, shelf, thumbnail, book, bookid } =\n        props;\n\n    //Sets the bookshelf state of a book on when searched, \"none\" is set as the default state\n    const [searchBookShelf, setSearchBookShelf] = useState(\"none\");\n\n    //Sets the bookshelf state of a book that is in search\n    const getBookShelf = async (bookid) => {\n        const abortCont = new AbortController();\n        await get(bookid)\n            .then((res) => res.json())\n            .then((data) => setSearchBookShelf(data.book.shelf))\n            .catch((err) => {\n                if (err.name === \"AbortError\") {\n                    console.log(\"Fetch Aborted\");\n                }\n            });\n        return () => abortCont.abort();\n    };\n\n    // useEffect utilizes the empty dependency array so that getBookShelf is only called once and does not create and infinite loop\n    useEffect(() => {\n        let didCancel = true;\n        if (didCancel) {\n            getBookShelf(bookid);\n        }\n        return () => (didCancel = false);\n    }, []);\n\n    return (\n        <div className=\"book\">\n            <div className=\"book-top\">\n                {thumbnail !== \"no image\" ? (\n                    <div\n                        className=\"book-cover\"\n                        style={{\n                            width: 128,\n                            height: 193,\n                            backgroundImage: 'url(\"' + thumbnail + '\")',\n                        }}\n                    ></div>\n                ) : (\n                    <div\n                        className=\"book-cover-placeholder\"\n                        style={{ width: 128, height: 193 }}\n                    >\n                        <p>no image available</p>\n                    </div>\n                )}\n                <ShelfSelector\n                    books={books}\n                    onMove={onMove}\n                    id={bookid}\n                    shelf={shelf}\n                    searchBookShelf={searchBookShelf}\n                    book={book}\n                ></ShelfSelector>\n            </div>\n            <div className=\"book-title\">{title}</div>\n\n            <div className=\"book-authors\">\n                {\n                    // If there is only one author\n\n                    authors !== undefined\n                        ? authors.map((author) => {\n                              let authorName = author.split(\" \").join(\"-\");\n                              return <p key={authorName}>{author}</p>;\n                          })\n                        : authors\n                }\n            </div>\n        </div>\n    );\n};\n\nBooks.propTypes = {\n    books: propTypes.array,\n    onMove: propTypes.func,\n    title: propTypes.string,\n    authors: propTypes.array,\n    shelf: propTypes.string,\n    thumbnail: propTypes.string,\n    book: propTypes.object,\n    bookid: propTypes.string,\n};\n\nexport default Books;\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { search, update } from \"./BooksAPI\";\nimport Books from \"./Books\";\n\n// Search component queries for books and passes books data down to Books component\nconst Search = () => {\n    const [queriedBooks, setQueriedBooks] = useState(\"\");\n    const [enteredQuery, setEnteredQuery] = useState(\"\");\n\n    // Get Book Data based on the Users query\n    const handleChange = async (query) => {\n        setEnteredQuery(query);\n    };\n\n    // Sets queried books data, if the query is blank then the state for the queried books is set to an empty string.\n    useEffect(() => {\n        let didCancel = false;\n        //use setTimeout for bouncing\n        const identifier = setTimeout(async () => {\n            if (enteredQuery !== \"\") {\n                const response = await search(enteredQuery);\n                const responseData = await response.json();\n                if (!didCancel) {\n                    setQueriedBooks(responseData.books);\n                }\n            } else {\n                setQueriedBooks(\"\");\n            }\n        }, 500);\n        return () => {\n            didCancel = true;\n            clearTimeout(identifier);\n        };\n    }, [enteredQuery]);\n\n    //moveBook function updates the shelf state of a book if a different bookshelf is selected\n    const moveBook = (currbook, shelf) => {\n        let didCancel = false;\n        async function updateData() {\n            await update(currbook, shelf);\n        }\n        if (!didCancel) {\n            updateData();\n        }\n        return () => (didCancel = true);\n    };\n\n    if (queriedBooks === \"\" || queriedBooks === undefined) {\n        return (\n            <div className=\"search-books\">\n                <div className=\"search-books-bar\">\n                    <Link to=\"/\" exact=\"true\">\n                        <button className=\"close-search\">Close</button>\n                    </Link>\n                    <div className=\"search-books-input-wrapper\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Search by title or author\"\n                            onChange={(event) => {\n                                handleChange(event.target.value);\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"search-books-results\">\n                    <p>No Keywords Entered</p>\n                </div>\n            </div>\n        );\n    } else if (queriedBooks.items && queriedBooks.items.length === 0) {\n        return (\n            <div className=\"search-books\">\n                <div className=\"search-books-bar\">\n                    <Link to=\"/\" exact=\"true\">\n                        <button className=\"close-search\">Close</button>\n                    </Link>\n                    <div className=\"search-books-input-wrapper\">\n                        {/*\n                    NOTES: The search from BooksAPI is limited to a particular set of search terms.\n                    You can find these search terms here:\n                    https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\n\n                    However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n                    you don't find a specific author or title. Every search is limited by search terms.\n                    */}\n                        <input\n                            type=\"text\"\n                            placeholder=\"Search by title or author\"\n                            onChange={(event) => {\n                                handleChange(event.target.value);\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"search-books-results\">\n                    <p>No results found with those keywords</p>\n                </div>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"search-books\">\n                <div className=\"search-books-bar\">\n                    <Link to=\"/\" exact=\"true\">\n                        <button className=\"close-search\">Close</button>\n                    </Link>\n                    <div className=\"search-books-input-wrapper\">\n                        {/*\n                        NOTES: The search from BooksAPI is limited to a particular set of search terms.\n                        You can find these search terms here:\n                        https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\n\n                        However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n                        you don't find a specific author or title. Every search is limited by search terms.\n                        */}\n                        <input\n                            type=\"text\"\n                            placeholder=\"Search by title or author\"\n                            onChange={(event) => {\n                                handleChange(event.target.value);\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"search-books-results\">\n                    <ol className=\"books-grid\">\n                        {queriedBooks.map((book) => (\n                            <li key={book.id}>\n                                <Books\n                                    books={queriedBooks}\n                                    onMove={moveBook}\n                                    title={book.title}\n                                    authors={book.authors}\n                                    shelf={book.shelf}\n                                    thumbnail={\n                                        book.imageLinks\n                                            ? book.imageLinks.smallThumbnail\n                                            : \"no image\"\n                                    }\n                                    book={book}\n                                    bookid={book.id}\n                                ></Books>\n                            </li>\n                        ))}\n                    </ol>\n                </div>\n            </div>\n        );\n    }\n};\nexport default Search;\n","import React from \"react\";\nimport Books from \"./Books\";\nimport propTypes from \"prop-types\";\n\n// Bookcase component displays books in their respective selected bookshelves\nconst Bookcase = (props) => {\n    //Destructure passed down props\n    const { books, onMove } = props;\n    //Return books in their respective bookshelves\n    return (\n        <div className=\"list-books-content\">\n            <div>\n                <div className=\"bookshelf currentlyReading\">\n                    <h2 className=\"bookshelf-title\">Currently Reading</h2>\n                    <div className=\"bookshelf-books\">\n                        <ol className=\"books-grid\">\n                            {books\n                                .filter(\n                                    (book) => book.shelf === \"currentlyReading\"\n                                )\n                                .map((book) => (\n                                    <li key={book.id}>\n                                        <Books\n                                            books={books}\n                                            onMove={onMove}\n                                            title={book.title}\n                                            authors={book.authors}\n                                            shelf={book.shelf}\n                                            thumbnail={\n                                                book.imageLinks\n                                                    ? book.imageLinks\n                                                          .smallThumbnail\n                                                    : \"no image\"\n                                            }\n                                            book={book}\n                                            bookid={book.id}\n                                        ></Books>\n                                    </li>\n                                ))}\n                        </ol>\n                    </div>\n                </div>\n                <div className=\"bookshelf wantToRead\">\n                    <h2 className=\"bookshelf-title\">Want to Read</h2>\n                    <div className=\"bookshelf-books\">\n                        <ol className=\"books-grid\">\n                            {books\n                                .filter((book) => book.shelf === \"wantToRead\")\n                                .map((book) => (\n                                    <li key={book.id}>\n                                        <Books\n                                            books={books}\n                                            onMove={onMove}\n                                            title={book.title}\n                                            authors={book.authors}\n                                            shelf={book.shelf}\n                                            thumbnail={\n                                                book.imageLinks\n                                                    ? book.imageLinks\n                                                          .smallThumbnail\n                                                    : \"no image\"\n                                            }\n                                            book={book}\n                                            bookid={book.id}\n                                        ></Books>\n                                    </li>\n                                ))}\n                        </ol>\n                    </div>\n                </div>\n                <div className=\"bookshelf read\">\n                    <h2 className=\"bookshelf-title\">Read</h2>\n                    <div className=\"bookshelf-books\">\n                        <ol className=\"books-grid\">\n                            {books\n                                .filter((book) => book.shelf === \"read\")\n                                .map((book) => (\n                                    <li key={book.id}>\n                                        <Books\n                                            books={books}\n                                            onMove={onMove}\n                                            title={book.title}\n                                            authors={book.authors}\n                                            shelf={book.shelf}\n                                            thumbnail={\n                                                book.imageLinks\n                                                    ? book.imageLinks\n                                                          .smallThumbnail\n                                                    : \"no image\"\n                                            }\n                                            book={book}\n                                            bookid={book.id}\n                                        ></Books>\n                                    </li>\n                                ))}\n                        </ol>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nBookcase.propTypes = {\n    books: propTypes.array,\n    onMove: propTypes.func,\n};\n\nexport default Bookcase;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Bookcase from \"./Bookcase\";\nimport propTypes from \"prop-types\";\n\n// Home page listing selected books in their respective bookshelves\nconst ListBooks = (props) => {\n    const { books, onMove } = props;\n    if (books !== \"\") {\n        return (\n            <div className=\"list-books\">\n                <section className=\"header-container\">\n                    <div className=\"list-books-title-container\">\n                        <div className=\"list-books-title\">\n                            <h1>MyReads</h1>\n                        </div>\n                    </div>\n                </section>\n                <Bookcase books={books} onMove={onMove} />\n                <div className=\"open-search\">\n                    <Link to=\"/search\">\n                        <button>Add a book</button>\n                    </Link>\n                </div>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"list-books\">\n                <p>No books to show</p>\n                <div className=\"open-search\">\n                    <Link to=\"/search\">\n                        <button>Add a book</button>\n                    </Link>\n                </div>\n            </div>\n        );\n    }\n};\n\nListBooks.propTypes = {\n    books: propTypes.array,\n    onMove: propTypes.func,\n};\n\nexport default ListBooks;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { update, api, headers } from \"./BooksAPI\";\nimport ListBooks from \"./list-books\";\n\n// Component gathers all books and passes the data down to the ListBooks component\nconst BookShelf = () => {\n    const [allBooks, setAllBooks] = useState(\"\");\n    const booksRef = useRef(\"\");\n\n    const moveBook = (currbook, shelf) => {\n        let didCancel = false;\n        async function updateData() {\n            if (!didCancel) {\n                await update(currbook, shelf);\n                getData();\n            }\n        }\n        updateData();\n        return () => {\n            didCancel = true;\n        };\n    };\n\n    const getData = async () => {\n        const response = await fetch(`${api}/books`, { headers });\n        const newData = await response.json();\n        booksRef.current = newData;\n        if (allBooks !== booksRef.current) {\n            setAllBooks(newData);\n        } else {\n            return;\n        }\n    };\n\n    useEffect((prevCount) => {\n        getData();\n    }, []);\n\n    if (allBooks) {\n        return <ListBooks books={allBooks.books} onMove={moveBook} />;\n    } else {\n        return null;\n    }\n};\n\nexport default BookShelf;\n","import React from \"react\";\n// import * as BooksAPI from './BooksAPI'\nimport \"./App.css\";\nimport Search from \"./search\";\nimport BookShelf from \"./bookshelf\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nclass BooksApp extends React.Component {\n    state = {\n        showSearchPage: false,\n    };\n\n    render() {\n        return (\n            <BrowserRouter>\n                <Route\n                    render={({ location }) => (\n                        <Switch location={location}>\n                            <Route path=\"/\" exact component={BookShelf}></Route>\n                            <Route path=\"/search\" component={Search}></Route>\n                        </Switch>\n                    )}\n                />\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default BooksApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}